<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
Long story short. I broke the forked blog system and want to fix the current condition. 

My blogging experience run through general blogging service, WordPress, static HTML to GitHub pages. It is cool to move the blog onto GitHub. It is also the most challenging. 

I started building my game on Wednesday, Nov 11th, by trying to set up a simple and ideal (means not in real life) function model in Python. 

~~~~{python}
#The parameter is the amount of salt generated each time when 
#the trap is triggered
#Variables: time h keep increasing, but should be processed in the range of (0, 24), temperature c, saturation s, mass of the latest amount of salt Msalt m
#total times of the trap triggered n
#Pre-definied constants: mass of water M, mass of initial amount of salt ini
#the slope of the supposed (ideal) saturation-temprature linear function k, s = k * c
#the supposed (ideal) temperature-time sine function: c = sine(h)
#Amount of crystal = (ini + m * n) - k * M

#you will need paper to help with writing the function
#h = random or range(0, 24)
#c = sin(h / 2 * math.pi)
#k = 
#s = k * c
#ini = 
#m = 
#M =
#n = 0
#return the amount of crystal that would be crystalized
import random
import math
h = float(random.randint(0, 24))
c = math.sin(h * math.pi / 12)
k = float(0.3)
s = k * c
ini = float(50.0)
m = float(0.1)
M = float(100.0)
n = float(0.0)
#current problem: the function returns the same result when h and c are different
def func(n):
    return float((ini + m * n) - s * M)

print h, c, s, ini, k * M
print func(100.0)

~~~~
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>Long story short. I broke the forked blog system and want to fix the current condition. </p>

<p>My blogging experience run through general blogging service, WordPress, static HTML to GitHub pages. It is cool to move the blog onto GitHub. It is also the most challenging. </p>

<p>I started building my game on Wednesday, Nov 11th, by trying to set up a simple and ideal (means not in real life) function model in Python. </p>

<p>~~~~{python}</p>

<h1 id="theparameteristheamountofsaltgeneratedeachtimewhen">The parameter is the amount of salt generated each time when</h1>

<h1 id="thetrapistriggered">the trap is triggered</h1>

<h1 id="variablestimehkeepincreasingbutshouldbeprocessedintherangeof024temperaturecsaturationsmassofthelatestamountofsaltmsaltm">Variables: time h keep increasing, but should be processed in the range of (0, 24), temperature c, saturation s, mass of the latest amount of salt Msalt m</h1>

<h1 id="totaltimesofthetraptriggeredn">total times of the trap triggered n</h1>

<h1 id="predefiniedconstantsmassofwatermmassofinitialamountofsaltini">Pre-definied constants: mass of water M, mass of initial amount of salt ini</h1>

<h1 id="theslopeofthesupposedidealsaturationtempraturelinearfunctionkskc">the slope of the supposed (ideal) saturation-temprature linear function k, s = k * c</h1>

<h1 id="thesupposedidealtemperaturetimesinefunctioncsineh">the supposed (ideal) temperature-time sine function: c = sine(h)</h1>

<h1 id="amountofcrystalinimnkm">Amount of crystal = (ini + m * n) - k * M</h1>

<h1 id="youwillneedpapertohelpwithwritingthefunction">you will need paper to help with writing the function</h1>

<h1 id="hrandomorrange024">h = random or range(0, 24)</h1>

<h1 id="csinh2mathpi">c = sin(h / 2 * math.pi)</h1>

<h1 id="k">k =</h1>

<h1 id="skc">s = k * c</h1>

<h1 id="ini">ini =</h1>

<h1 id="m">m =</h1>

<h1 id="m">M =</h1>

<h1 id="n0">n = 0</h1>

<h1 id="returntheamountofcrystalthatwouldbecrystalized">return the amount of crystal that would be crystalized</h1>

<p>import random
import math
h = float(random.randint(0, 24))
c = math.sin(h * math.pi / 12)
k = float(0.3)
s = k * c
ini = float(50.0)
m = float(0.1)
M = float(100.0)
n = float(0.0)</p>

<h1 id="currentproblemthefunctionreturnsthesameresultwhenhandcaredifferent">current problem: the function returns the same result when h and c are different</h1>

<p>def func(n):
    return float((ini + m * n) - s * M)</p>

<p>print h, c, s, ini, k * M
print func(100.0)</p>

<p>~~~~</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>Â© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "divingdeepillustrations";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
</body>
</html>
